// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package snapshotpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SnapshotProgramServiceClient is the client API for SnapshotProgramService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SnapshotProgramServiceClient interface {
	Snapshot(ctx context.Context, in *SnapshotRequest, opts ...grpc.CallOption) (*SnapshotResponse, error)
}

type snapshotProgramServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSnapshotProgramServiceClient(cc grpc.ClientConnInterface) SnapshotProgramServiceClient {
	return &snapshotProgramServiceClient{cc}
}

func (c *snapshotProgramServiceClient) Snapshot(ctx context.Context, in *SnapshotRequest, opts ...grpc.CallOption) (*SnapshotResponse, error) {
	out := new(SnapshotResponse)
	err := c.cc.Invoke(ctx, "/snapshot_program.SnapshotProgramService/Snapshot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SnapshotProgramServiceServer is the server API for SnapshotProgramService service.
// All implementations must embed UnimplementedSnapshotProgramServiceServer
// for forward compatibility
type SnapshotProgramServiceServer interface {
	Snapshot(context.Context, *SnapshotRequest) (*SnapshotResponse, error)
	mustEmbedUnimplementedSnapshotProgramServiceServer()
}

// UnimplementedSnapshotProgramServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSnapshotProgramServiceServer struct {
}

func (UnimplementedSnapshotProgramServiceServer) Snapshot(context.Context, *SnapshotRequest) (*SnapshotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Snapshot not implemented")
}
func (UnimplementedSnapshotProgramServiceServer) mustEmbedUnimplementedSnapshotProgramServiceServer() {
}

// UnsafeSnapshotProgramServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SnapshotProgramServiceServer will
// result in compilation errors.
type UnsafeSnapshotProgramServiceServer interface {
	mustEmbedUnimplementedSnapshotProgramServiceServer()
}

func RegisterSnapshotProgramServiceServer(s grpc.ServiceRegistrar, srv SnapshotProgramServiceServer) {
	s.RegisterService(&SnapshotProgramService_ServiceDesc, srv)
}

func _SnapshotProgramService_Snapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnapshotProgramServiceServer).Snapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/snapshot_program.SnapshotProgramService/Snapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnapshotProgramServiceServer).Snapshot(ctx, req.(*SnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SnapshotProgramService_ServiceDesc is the grpc.ServiceDesc for SnapshotProgramService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SnapshotProgramService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "snapshot_program.SnapshotProgramService",
	HandlerType: (*SnapshotProgramServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Snapshot",
			Handler:    _SnapshotProgramService_Snapshot_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "snapshot_program.proto",
}
