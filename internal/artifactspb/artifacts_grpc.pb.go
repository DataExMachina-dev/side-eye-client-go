// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package artifactspb

import (
	context "context"
	chunkpb "github.com/DataExMachina-dev/side-eye-go/internal/chunkpb"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ArtifactStoreClient is the client API for ArtifactStore service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ArtifactStoreClient interface {
	GetArtifact(ctx context.Context, in *GetArtifactRequest, opts ...grpc.CallOption) (ArtifactStore_GetArtifactClient, error)
}

type artifactStoreClient struct {
	cc grpc.ClientConnInterface
}

func NewArtifactStoreClient(cc grpc.ClientConnInterface) ArtifactStoreClient {
	return &artifactStoreClient{cc}
}

func (c *artifactStoreClient) GetArtifact(ctx context.Context, in *GetArtifactRequest, opts ...grpc.CallOption) (ArtifactStore_GetArtifactClient, error) {
	stream, err := c.cc.NewStream(ctx, &ArtifactStore_ServiceDesc.Streams[0], "/artifacts.ArtifactStore/GetArtifact", opts...)
	if err != nil {
		return nil, err
	}
	x := &artifactStoreGetArtifactClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ArtifactStore_GetArtifactClient interface {
	Recv() (*chunkpb.Chunk, error)
	grpc.ClientStream
}

type artifactStoreGetArtifactClient struct {
	grpc.ClientStream
}

func (x *artifactStoreGetArtifactClient) Recv() (*chunkpb.Chunk, error) {
	m := new(chunkpb.Chunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ArtifactStoreServer is the server API for ArtifactStore service.
// All implementations must embed UnimplementedArtifactStoreServer
// for forward compatibility
type ArtifactStoreServer interface {
	GetArtifact(*GetArtifactRequest, ArtifactStore_GetArtifactServer) error
	mustEmbedUnimplementedArtifactStoreServer()
}

// UnimplementedArtifactStoreServer must be embedded to have forward compatible implementations.
type UnimplementedArtifactStoreServer struct {
}

func (UnimplementedArtifactStoreServer) GetArtifact(*GetArtifactRequest, ArtifactStore_GetArtifactServer) error {
	return status.Errorf(codes.Unimplemented, "method GetArtifact not implemented")
}
func (UnimplementedArtifactStoreServer) mustEmbedUnimplementedArtifactStoreServer() {}

// UnsafeArtifactStoreServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ArtifactStoreServer will
// result in compilation errors.
type UnsafeArtifactStoreServer interface {
	mustEmbedUnimplementedArtifactStoreServer()
}

func RegisterArtifactStoreServer(s grpc.ServiceRegistrar, srv ArtifactStoreServer) {
	s.RegisterService(&ArtifactStore_ServiceDesc, srv)
}

func _ArtifactStore_GetArtifact_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetArtifactRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ArtifactStoreServer).GetArtifact(m, &artifactStoreGetArtifactServer{stream})
}

type ArtifactStore_GetArtifactServer interface {
	Send(*chunkpb.Chunk) error
	grpc.ServerStream
}

type artifactStoreGetArtifactServer struct {
	grpc.ServerStream
}

func (x *artifactStoreGetArtifactServer) Send(m *chunkpb.Chunk) error {
	return x.ServerStream.SendMsg(m)
}

// ArtifactStore_ServiceDesc is the grpc.ServiceDesc for ArtifactStore service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ArtifactStore_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "artifacts.ArtifactStore",
	HandlerType: (*ArtifactStoreServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetArtifact",
			Handler:       _ArtifactStore_GetArtifact_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "artifacts.proto",
}
